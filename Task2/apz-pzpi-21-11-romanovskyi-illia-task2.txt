1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система призначена для контролю надзвичайних ситуацій на виробництві. Вона реалізована на мові програмування Python з використанням фреймворку Django для створення REST API, що забезпечує комунікацію між клієнтськими частинами та сервером. Система використовує HTTP протокол для передачі даних, причому кожен API метод має свою адресу та параметри. Дані, що надходять на сервер або відправляються з нього за допомогою HTTP, представлені у форматі JSON. REST API було обрано завдяки його простоті в реалізації та масштабованості. Така архітектура дозволяє легко інтегрувати різні клієнтські частини, включаючи веб-клієнт, мобільний додаток та пристрої IoT. Фронтенд-частина системи, реалізована за допомогою фреймворку React і збирача Node, взаємодіє з сервером через REST API, отримуючи та відправляючи дані у форматі JSON. Це забезпечує швидку та зручну розробку інтерфейсів користувача, які можуть динамічно оновлюватись відповідно до стану даних на сервері. Пристрої IoT, які використовуються для моніторингу температури вологи та шуму, також інтегруються з системою через REST API. Вони відправляють зібрані дані на сервер, де вони обробляються, що дозволяє забезпечити оперативний контроль за зонами виробництв.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На діаграмі розгортання (див. рисунок 3.2) зображена структура програмної системи для контролю роботи вовняної ферми, яка складається з наступних компонентів:
- **Backend Server**: Реалізований з використанням фреймворку Django. Містить такі компоненти:
- **Database Server**: На окремому сервері розміщена база даних MySQL, яка зберігає інформацію про працівників, овець, корма, записи сканерів та інші дані. З'єднання з серверною частиною відбувається через протокол TCP/IP.
- **Web Server**: Веб-сервер, на якому розгорнуто фронтенд-частину програми, реалізовану за допомогою фреймворку React та збирача Vite. Містить такі компоненти:
  - **React Components**: Відповідають за відображення інтерфейсу користувача.
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити.
- **Scanner (IoT)**: Пристрій IoT, що збирає дані про температуру та відправляє їх на сервер через HTTP. Складається з таких компонентів:
  - **Main Loop**: Основний цикл роботи пристрою, який збирає та передає дані.
- **Android Mobile**: Мобільний додаток для платформи Android, який забезпечує мобільний доступ до системи. Містить такі компоненти:
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити для отримання та відправки даних.
Ця архітектура забезпечує зручну та ефективну взаємодію між усіма компонентами системи, дозволяючи забезпечити безперервний контроль та управління фермою. Використання HTTP-протоколу та REST API дозволяє легко масштабувати систему та інтегрувати нові клієнтські частини.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для збереження інформації, що стосується працівників, зон виробництва, звітів, датчиків та іншої інформації було обрано систему управління бази даних SQLite, яка використовується стандартною ORM Django. SQLite є зручною для використання в розробці та тестуванні, забезпечуючи простоту налаштування та інтеграції.Серверна частина була розбита на блоки для зручності розробки та подальшої підтримки програми. Було виділено наступні компоненти: models, views, urls, settings, admin. Модуль models містить структури з полями, які представляють собою сутності в базі даних. Це дозволяє легко визначати та маніпулювати даними, що зберігаються в базі даних. Модуль views містить логіку обробки запитів, викликаючи відповідні серіалізатори для перетворення даних, а також методи для взаємодії з моделями та базою даних. Методи у views управляють помилками, надсилають відповіді клієнту та виконують логування. Ці методи забезпечують маршрутизацію запитів, обробку даних і відправку відповідей, гарантуючи правильну взаємодію між клієнтською та серверною частинами програми. Модуль urls містить маршрутизацію запитів. Тут визначаються URL-адреси, які прив’язуються до відповідних методів у views. Це забезпечує правильне направлення запитів до відповідних обробників, що спрощує управління різними маршрутами у додатку. Модуль settings містить налаштування конфігурації Django проекту. У цьому модулі зберігаються параметри бази даних, налаштування додатків, середовища та інші важливі конфігурації, які визначають поведінку серверного додатка. Модуль admin містить налаштування для адміністративної частини додатку. Використовуючи цей модуль, можна легко управляти моделями та даними через інтерактивний інтерфейс адміністратора Django, що значно спрощує управління контентом та даними у системі. Щоб серверний додаток міг взаємодіяти з базою даних SQLite, було використано стандартну ORM Django. Це дозволяє відправляти запити до бази даних та автоматично обробляє серіалізацію та десеріалізацію структур під час запису та зчитування даних з бази. Також було прийнято рішення додати можливість логування з використанням стандартного логування Django. Це забезпечує гнучке налаштування логування для різних середовищ, таких як розробка, тестування та продакшн. Логування дозволяє налаштовувати рівні логування, такі як debug, info, warn та error, що допомагає фільтрувати логування відповідно до важливості повідомлень. Це забезпечує надійне та зручне логування, що є важливим аспектом для підтримки та моніторингу роботи системи.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Предметна область включає чотири типи користувачів. Перший тип — це неавторизований користувач, який, використовуючи веб-клієнт, має можливість тільки авторизуватись або створити новий акаунт. Описані функціональні потреби повністю відповідають необхідним для неавторизованого користувача функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.1. Другий тип – це працівник, який, використовуючи веб-клієнт, має можливість взаємодіяти з серверною частиною системи, користуватися функціями перегляду виробництв, на які він був доданий, зон на цих виробництвах, а також додавати нові звіти на зони виробництва, та редагувати звіти із зон, на який працівник позначений як «відповідальний». Описані функціональні потреби повністю відповідають необхідним для вівчаря функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.2. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Під час моделювання предметної області було виділено основні види користувачів для даної програмної системи та їхній функціонал, який був описаний, а також представлений у вигляді діаграм прецедентів.

5 ПОБУДОВА ER-ДІАГРАМИ

Спираючись на отриману модель предметної області була побудована схема бази даних, яка зможе зберігати всю інформацію, необхідну для реалізації описаної функціональності.
Було виділено 8 сутностей: юзери, профілі юзерів, виробництва, зони виробництва, робітники виробництва, звіти, фотографії у звітах, сенсор.
Виділені сутності отримали наступні атрибути:
-	юзери: id, пошта, пароль. Первинний ключ: id;
- профілі юзерів: id, юзер_id, is_owner, is_worker. Первинний ключ: id. Зовнішній ключ: юзер_id;
-	виробництва: id, назва, опис, user_id(власник). Первинний ключ: id. Зовнішній ключ: юзер_id;
-	зони виробництва: id, назва, опис, виробництво_id, юзер_id. Первинний ключ: id. Зовнішні ключі: виробництво_id, юзер_id(може бути відсутнім)
-	робітники виробництва: id, юзер_id, виробництво_id. Первинний ключ: id. Зовнішні ключі: юзер_id, виробництво_id;
-	звіти: id, назва, юзер_id, зона_виробництва_id, опис, статус, часова мітка. Первинний ключ: id. Зовнішні ключі: юзер_id, зона_виробництва_id;
-	фотографії у звітах: id, звіт_id, зображення. Первинний ключ: id. Зовнішній ключ: звіт_id; 
-	сенсори: id, зона_виробництва_id, номер сенсору. Первинний ключ: id. Зовнішній ключ: зона_виробництва_id;
Позначимо зв’язки між сутностями:
–	"профілі юзерів - юзери" – тип зв’язку “один до одного”, оскільки кожен юзер має лише один профіль.
–	"виробництва - юзери" – тип зв’язку “один до багатьох”, оскільки у кожного юзера може бути декілька виробництв.
–	"зони виробництва  - виробництва" – тип зв’язку “один до багатьох”, кожна зона може належати лише одному виробництву.
–	"зони виробництва  - юзер" – тип зв’язку “один до багатьох”, оскільки кожна зона може мати лише одного відповідального робітника.
–	"звіти - юзери" – тип зв’язку “один до багатьох”, оскільки один юзер може зробити багато звітів.
–	"звіти – зони виробництва" – тип зв’язку “один до багатьох”, оскільки для кожної зони виробництва може бути багато звітів.
–	"фотографії у звітах - звіти" – тип зв’язку “один до багатьох”, оскільки кожен звіт може мати багато фотографій.
–	"сенсори - зони виробництва" – тип зв’язку “один до одного”, оскільки кожен сенсор може відповідати лише одній зоні виробництва.
	Діаграма ER моделі даних на якій відображено вказані сутності та зв’язки зображена на рисунку 2.1.

6 СПЕЦИФІКАЦІЯ REST

Цей розділ містить інформацію про REST API, створену для взаємодії з програмною системою. API реалізовано на мові програмування Python з використанням фреймворку Django REST Framework, що забезпечує масштабованість та простоту в реалізації.
	Усі запити мають надсилатись за адресою, на якій працює сервер. В даному випадку це: http://127.0.0.1:8000.
	Ендпоінти поділені на кілька підмодулів, тому опис REST специфікації буде також по модулях.
	Модуль: Аутентифікація та Авторизація
get_csrf_token	GET	Отримати CSRF токен
/	GET	Домашня сторінка
login	POST	Сторінка логіну/Вхід користувача
registration	POST	Сторінка реєстрації/Реєстрація
exit	POST	Вихід з системи
	Модуль: Виробництво
create_production	POST	Створити виробництво
edit_production/int:production
PUT	Редагувати виробництво
delete_production/int:production
DELETE	Видалити виробництво
	Модуль: Зони Виробництва
production_zones/int:production
GET	Отримати всі зони виробництва
create_production_zone/int:production
POST	Створити нову зону виробництва
edit_production_zone/int:production_zone
PUT	Редагувати зону виробництва
delete_production_zone/int:production_zone
DELETE	Видалити зону виробництва
get_production_zone/int:production_zone/
GET	Отримати інформацію про зону виробництва
	Модуль: Працівники
production_workers/int:production
GET	Отримати всіх працівників виробництва
add_worker/int:production
POST	Додати працівника до виробництва
delete_worker/int:production
DELETE	Видалити працівника з виробництва
	Модуль: Звіти
add_report/int:production_zone
POST	Додати новий звіт
all_reports/int:production_zone
GET	Отримати всі звіти
my_reports/	GET	Отримати звіти поточного користувача
edit_report/int:report
PUT	Редагувати звіт
delete_report/int:report
DELETE	Видалити звіт
get_report/int:report_id/
GET	Отримати інформацію про звіт
	Модуль: Датчики
add_sensor/int:production_zone
POST	Додати новий датчик
delete_sensor/int:production_zone
DELETE	Видалити датчик
get_sensor_data/	GET	Отримати дані з датчика
display_sensor_data/int:production_zone
GET	Показати дані з датчика
Кожен модуль ендпоінтів був створений з метою забезпечення ефективної та зручної взаємодії з даними системи через REST API. Всі ендпоінти мають чітко визначені методи HTTP, параметри та тіла запитів, що дозволяє клієнтам системи виконувати необхідні операції.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів відображає загальну архітектуру системи контролю роботи вовняної ферми. Основна увага на даній діаграмі приділена серверу, в той час як інші компоненти будуть розглянуті детальніше у наступних розділах.
На діаграмі зображені наступні основні компоненти системи:
Backend Server (Сервер бекенду):
Основний компонент, що забезпечує обробку даних і реалізацію бізнес-логіки програми. Сервер бекенду складається з наступних підкомпонентів:
views.py (Сервіси): Реалізують бізнес-логіку і взаємодію з базою даних через SQL-запити. Вони відповідають за обробку даних і виконання операцій, необхідних для функціонування системи.
urls.py (Кінцеві точки): Забезпечують комунікацію між клієнтами і сервером, обробляючи HTTP-запити і відповіді. Вони приймають запити від клієнтів, викликають відповідні сервіси для обробки бізнес-логіки і повертають результати назад до клієнтів.
models.py (Моделі): Забезпечують взаємодію з базою даних
Database Server (Сервер бази даних):
Відповідає за зберігання всієї інформації, необхідної для функціонування системи. Це включає дані про вівчарів, овець, корми, температурні сканери тощо. Сервер бази даних забезпечує надійне збереження і швидкий доступ до даних.
Mobile App (Мобільний додаток):
Клієнтський додаток для мобільних пристроїв, що дозволяє вівчарям і комірникам взаємодіяти з системою. Мобільний додаток забезпечує зручний інтерфейс для користувачів, дозволяючи їм виконувати необхідні операції на фермі.
Web Server (Веб-сервер):
Сервер, що обслуговує веб-клієнт. Веб-клієнт використовується фермером (бізнес-адміністратором) для взаємодії з системою через графічний інтерфейс. Веб-сервер забезпечує доступ до адміністративних функцій системи.
IoT (Інтернет речей):
Пристрої, такі як температурні сканери, що вимірюють і передають дані про температуру овець до серверу бекенду. Ці дані використовуються для моніторингу здоров'я овець і своєчасного реагування на відхилення від нормальних параметрів.
Взаємодія між компонентами:
Backend Server комунікує з Database Server через TCP/IP для доступу і збереження даних.
Mobile App, Web Server і IoT пристрої взаємодіють з Backend Server через HTTP, надсилаючи запити до відповідних кінцевих точок.
Endpoints на Backend Server обробляють запити, викликають відповідні сервіси для обробки бізнес-логіки і взаємодії з базою даних, і повертають результати назад до клієнтів.
Ця архітектура забезпечує модульність і масштабованість системи, що дозволяє легко додавати нові функціональні можливості і підтримувати існуючі компоненти. Детальніший розгляд компонентів системи буде проведено у наступних розділах.

ВИСНОВКИ

Під час виконання лабораторної роботи була  розроблена серверна частина для програмної системи моніторингу надзвичайних ситуацій на виробництві. 
