1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система призначена для контролю надзвичайних ситуацій на виробництві. Вона реалізована на мові програмування Python з використанням фреймворку Django для створення REST API, що забезпечує комунікацію між клієнтськими частинами та сервером. Система використовує HTTP протокол для передачі даних, причому кожен API метод має свою адресу та параметри. Дані, що надходять на сервер або відправляються з нього за допомогою HTTP, представлені у форматі JSON. REST API було обрано завдяки його простоті в реалізації та масштабованості. Така архітектура дозволяє легко інтегрувати різні клієнтські частини, включаючи веб-клієнт, мобільний додаток та пристрої IoT. Фронтенд-частина системи, реалізована за допомогою фреймворку React і збирача Node, взаємодіє з сервером через REST API, отримуючи та відправляючи дані у форматі JSON. Це забезпечує швидку та зручну розробку інтерфейсів користувача, які можуть динамічно оновлюватись відповідно до стану даних на сервері. Пристрої IoT, які використовуються для моніторингу температури вологи та шуму, також інтегруються з системою через REST API. Вони відправляють зібрані дані на сервер, де вони обробляються, що дозволяє забезпечити оперативний контроль за зонами виробництв.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На діаграмі розгортання (див. рисунок 3.2) зображена структура програмної системи для контролю роботи вовняної ферми, яка складається з наступних компонентів:
- **Backend Server**: Реалізований з використанням фреймворку Django. Містить такі компоненти:
- **Database Server**: На окремому сервері розміщена база даних MySQL, яка зберігає інформацію про працівників, овець, корма, записи сканерів та інші дані. З'єднання з серверною частиною відбувається через протокол TCP/IP.
- **Web Server**: Веб-сервер, на якому розгорнуто фронтенд-частину програми, реалізовану за допомогою фреймворку React та збирача Vite. Містить такі компоненти:
  - **React Components**: Відповідають за відображення інтерфейсу користувача.
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити.
- **Scanner (IoT)**: Пристрій IoT, що збирає дані про температуру та відправляє їх на сервер через HTTP. Складається з таких компонентів:
  - **Main Loop**: Основний цикл роботи пристрою, який збирає та передає дані.
- **Android Mobile**: Мобільний додаток для платформи Android, який забезпечує мобільний доступ до системи. Містить такі компоненти:
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити для отримання та відправки даних.
Ця архітектура забезпечує зручну та ефективну взаємодію між усіма компонентами системи, дозволяючи забезпечити безперервний контроль та управління фермою. Використання HTTP-протоколу та REST API дозволяє легко масштабувати систему та інтегрувати нові клієнтські частини. Для емулювання пристрою використовувався Wokwi, популярний редактор для емуляції та будування схем Embedded пристроїв. Wokwi дозволяє писати та тестувати код на віртуальних пристроях, що значно полегшує розробку та налагодження без необхідності мати фізичний пристрій під рукою.
IoT пристрій використовує HTTP протокол для передачі даних для зв’язку із серверною частиною. Кожні 5 секунд пристрій знімає показники температури, вологості та рівня шуму, і відправляє їх на сервер у форматі JSON.
На діаграмі розгортання зображена логіка програмної системи, основні технології, принцип роботи та компоненти системи (див. рисунок 3.2).


3 ОПИС АРХІТЕКТУРИ IOT ЧАСТИНИ

Для реалізації IoT частини був обраний мікроконтролер ESP32 з підключеними датчиками DHT22 та мікрофоном. Код для цього проекту написаний на мові програмування C++ і завантажений через середовище розробки Arduino IDE. Мова C++ була обрана через те, що вона напряму підтримує розробку програмного забезпечення для пристроїв без операційних систем та вбудованих девайсів. Також, Arduino IDE має широку підтримку бібліотек та простий у використанні інтерфейс для завантаження коду на пристрої.  На діаграмі комопнентів показана структура серверної частини, а також взаємодія з іншими компонентами системи (див. рисунок 3.1 ). 

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Предметна область включає чотири типи користувачів. Перший тип — це неавторизований користувач, який, використовуючи веб-клієнт, має можливість тільки авторизуватись або створити новий акаунт. Описані функціональні потреби повністю відповідають необхідним для неавторизованого користувача функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.1. Другий тип – це працівник, який, використовуючи веб-клієнт, має можливість взаємодіяти з серверною частиною системи, користуватися функціями перегляду виробництв, на які він був доданий, зон на цих виробництвах, а також додавати нові звіти на зони виробництва, та редагувати звіти із зон, на який працівник позначений як «відповідальний». Описані функціональні потреби повністю відповідають необхідним для вівчаря функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.2. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Під час моделювання предметної області було виділено основні види користувачів для даної програмної системи та їхній функціонал, який був описаний, а також представлений у вигляді діаграм прецедентів.

5 ПОБУДОВА ДІАГРАМИ ДІЯЛЬНОСТІ

На початку процесу здійснюється запуск сканера. Після запуску система намагається підключитися до Wi-Fi. Якщо підключення до Wi-Fi вдається, наступним кроком є зчитування даних зі сканера. Якщо підключення до Wi-Fi не вдається, виводиться повідомлення про помилку, і система повторно намагається підключитися до Wi-Fi. Коли дані зі сканера зчитані, здійснюється перевірка успішності цього зчитування. Якщо зчитування даних вдалося, система відправляє зчитані дані на локальний сервер. Якщо зчитування даних не вдалося, виводиться повідомлення про помилку, і система повторно намагається зчитати дані зі сканера. Після відправки даних на локальний сервер також перевіряється успішність цієї операції. Якщо відправка даних пройшла успішно, процес завершується. Якщо відправка даних не вдалася, виводиться повідомлення про помилку, і система повторно намагається відправити дані на локальний сервер.

6 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

На початку сканер зчитує дані з датчиків. Цей процес повторюється у циклі. Після зчитування даних з датчиків сканер відправляє ці дані на сервер. Після відправки даних сканер очікує на відповідь від сервера. Якщо сканер отримує відповідь від сервера, відбувається затримка (вказана як "Delay"), після якої цикл зчитування та відправки даних повторюється знову (вказано як "Restart loop"). У випадку, якщо зчитування даних або відправка даних не вдаються, сканер повторює відповідну операцію до успішного завершення.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма компонентів відображає загальну архітектуру системи контролю роботи вовняної ферми. Основна увага на даній діаграмі приділена серверу, в той час як інші компоненти будуть розглянуті детальніше у наступних розділах.
На діаграмі зображені наступні основні компоненти системи:
Backend Server (Сервер бекенду):
Основний компонент, що забезпечує обробку даних і реалізацію бізнес-логіки програми. Сервер бекенду складається з наступних підкомпонентів:
Database Server (Сервер бази даних):
Відповідає за зберігання всієї інформації, необхідної для функціонування системи. Це включає дані про вівчарів, овець, корми, температурні сканери тощо. Сервер бази даних забезпечує надійне збереження і швидкий доступ до даних.
Mobile App (Мобільний додаток):
Клієнтський додаток для мобільних пристроїв, що дозволяє вівчарям і комірникам взаємодіяти з системою. Мобільний додаток забезпечує зручний інтерфейс для користувачів, дозволяючи їм виконувати необхідні операції на фермі.
Web Server (Веб-сервер):
Сервер, що обслуговує веб-клієнт. Веб-клієнт використовується фермером (бізнес-адміністратором) для взаємодії з системою через графічний інтерфейс. Веб-сервер забезпечує доступ до адміністративних функцій системи.
IoT (Інтернет речей):
main loop: Основний цикл сканеру який реалізує функціонал
DHD22: Сенсор температури та вологості повітря.
microphone: Мікрофон, який замірює рівень шуму.
Пристрої, такі як температурні сканери, що вимірюють і передають дані про температуру овець до серверу бекенду. Ці дані використовуються для моніторингу здоров'я овець і своєчасного реагування на відхилення від нормальних параметрів.
Взаємодія між компонентами:
Backend Server комунікує з Database Server через TCP/IP для доступу і збереження даних.
Mobile App, Web Server і IoT пристрої взаємодіють з Backend Server через HTTP, надсилаючи запити до відповідних кінцевих точок.
Endpoints на Backend Server обробляють запити, викликають відповідні сервіси для обробки бізнес-логіки і взаємодії з базою даних, і повертають результати назад до клієнтів.
Ця архітектура забезпечує модульність і масштабованість системи, що дозволяє легко додавати нові функціональні можливості і підтримувати існуючі компоненти. Детальніший розгляд компонентів системи буде проведено у наступних розділах.

ВИСНОВКИ

Під час виконання лабораторної роботи була  розробка IoT для програмної системи моніторингу надзвичайних ситуацій на виробництві. 

ДОДАТОК А
Файл scanner.ino
#include <WiFi.h>
#include <HTTPClient.h>
#include "DHTesp.h"

const char* SSID = "Wokwi-GUEST";
const char* PASSWORD = "";

const int DHT_PIN = 18;
const int micPin = 35;  

DHTesp dhtSensor; // Declare DHT sensor object

float measureNoiseLevel() {
  int noiseLevel = analogRead(micPin);
  float noiseLevelDb = (noiseLevel / 4096.0) * 100.0; 
  return noiseLevelDb;
}

void setup() {
  Serial.begin(115200);
  dhtSensor.setup(DHT_PIN, DHTesp::DHT22); // Corrected to use dhtSensor
  WiFi.begin(SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
}

void loop() {
  float noiseLevelDb = measureNoiseLevel();
  Serial.print("Noise Level: ");
  Serial.print(noiseLevelDb);
  Serial.println(" dB");

  TempAndHumidity data = dhtSensor.getTempAndHumidity();
  Serial.print("Temperature: ");
  Serial.print(data.temperature, 2);
  Serial.print("°C, Humidity: ");
  Serial.print(data.humidity, 1);
  Serial.println("%");

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("http://localhost:8000/get_sensor_data");
    http.addHeader("Content-Type", "application/json");
    
    String jsonData = "{\"sensor_id\":14, \"Temperature\":" + String(data.temperature, 2) + 
                      ", \"Humidity\":" + String(data.humidity, 1) + 
                      ", \"Noise\":" + String(noiseLevelDb) + "}";
    
    int httpResponseCode = http.POST(jsonData);
    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println(httpResponseCode);
      Serial.println(response);
    } else {
      Serial.print("Error on sending POST: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  } else {
    Serial.println("Error in WiFi connection");
  }

  delay(5000); 
} 
