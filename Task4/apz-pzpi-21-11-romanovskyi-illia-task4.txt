1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Програмна система призначена для контролю надзвичайних ситуацій на виробництві. Вона реалізована на мові програмування Python з використанням фреймворку Django для створення REST API, що забезпечує комунікацію між клієнтськими частинами та сервером. Система використовує HTTP протокол для передачі даних, причому кожен API метод має свою адресу та параметри. Дані, що надходять на сервер або відправляються з нього за допомогою HTTP, представлені у форматі JSON. REST API було обрано завдяки його простоті в реалізації та масштабованості. Така архітектура дозволяє легко інтегрувати різні клієнтські частини, включаючи веб-клієнт, мобільний додаток та пристрої IoT. Фронтенд-частина системи, реалізована за допомогою фреймворку React і збирача Node, взаємодіє з сервером через REST API, отримуючи та відправляючи дані у форматі JSON. Це забезпечує швидку та зручну розробку інтерфейсів користувача, які можуть динамічно оновлюватись відповідно до стану даних на сервері. Пристрої IoT, які використовуються для моніторингу температури вологи та шуму, також інтегруються з системою через REST API. Вони відправляють зібрані дані на сервер, де вони обробляються, що дозволяє забезпечити оперативний контроль за зонами виробництв.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

На діаграмі розгортання (див. рисунок 3.2) зображена структура програмної системи для контролю роботи вовняної ферми, яка складається з наступних компонентів:
- **Backend Server**: Реалізований з використанням фреймворку Django. Містить такі компоненти:
- **Database Server**: На окремому сервері розміщена база даних MySQL, яка зберігає інформацію про працівників, овець, корма, записи сканерів та інші дані. З'єднання з серверною частиною відбувається через протокол TCP/IP.
- **Web Server**: Веб-сервер, на якому розгорнуто фронтенд-частину програми, реалізовану за допомогою фреймворку React та збирача Vite. Містить такі компоненти:
  - **React Components**: Відповідають за відображення інтерфейсу користувача.
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити.
- **Scanner (IoT)**: Пристрій IoT, що збирає дані про температуру та відправляє їх на сервер через HTTP. Складається з таких компонентів:
  - **Main Loop**: Основний цикл роботи пристрою, який збирає та передає дані.
- **Android Mobile**: Мобільний додаток для платформи Android, який забезпечує мобільний доступ до системи. Містить такі компоненти:
  - **Services**: Взаємодіють з серверною частиною через HTTP-запити для отримання та відправки даних.
Ця архітектура забезпечує зручну та ефективну взаємодію між усіма компонентами системи, дозволяючи забезпечити безперервний контроль та управління фермою. Використання HTTP-протоколу та REST API дозволяє легко масштабувати систему та інтегрувати нові клієнтські частини.

3 ОПИС АРХІТЕКТУРИ ВЕБ ЧАСТИНИ

Спираючись Клієнтська частина проекту використовує React TS як основний фронтенд фреймворк. React TS забезпечує необхідні інструменти та можливості для створення сучасних клієнтських додатків. Взаємодія з сервером здійснюється через HTTP-методи, які направляються до REST API, використовуючи маршрути до відповідних методів.
побудований на основі концепції компонентів, що дозволяє створювати веб-інтерфейс з невеликих, повторно використовуваних елементів. Це значно полегшує розробку та підтримку великих проектів. Окрім цього, React використовує віртуальний DOM для ефективного оновлення відображення при зміні даних. Це підвищує продуктивність та швидкодію додатка. Віртуальний DOM є ключовою особливістю React, яка робить його ідеальним вибором для створення SPA (Single Page Application). У SPA весь контент завантажується одноразово під час першого запуску додатка, а подальша навігація здійснюється без повторного завантаження сторінок.
React має найбільшу та найрозвиненішу екосистему серед усіх наявних фронтенд фреймворків. Поєднання компонентного підходу, віртуального DOM та великої екосистеми робить React дуже ефективним рішенням для створення клієнтських веб-додатків. 

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Предметна область включає чотири типи користувачів. Перший тип — це неавторизований користувач, який, використовуючи веб-клієнт, має можливість тільки авторизуватись або створити новий акаунт. Описані функціональні потреби повністю відповідають необхідним для неавторизованого користувача функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.1. Другий тип – це працівник, який, використовуючи веб-клієнт, має можливість взаємодіяти з серверною частиною системи, користуватися функціями перегляду виробництв, на які він був доданий, зон на цих виробництвах, а також додавати нові звіти на зони виробництва, та редагувати звіти із зон, на який працівник позначений як «відповідальний». Описані функціональні потреби повністю відповідають необхідним для вівчаря функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.2. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Третій тип – це власник, який, також за допомогою веб-клієнта, може взаємодіяти з серверною частиною та виконувати свої обов'язки. Він може додавати нові виробництва, зони на них, датчики на існуючі зони, редагувати усю інформацію. Описані функціональні потреби повністю відповідають необхідним для комірника функціям, вони проілюстровані у вигляді діаграми прецедентів на рисунку 1.3. Під час моделювання предметної області було виділено основні види користувачів для даної програмної системи та їхній функціонал, який був описаний, а також представлений у вигляді діаграм прецедентів.

5 ПОБУДОВА ДІАГРАМИ СТАНІВ

Діаграма станів для користувача зареестрованого як "Працівник"
Якщо користувач не авторизований, його спочатку запитують, чи є у нього обліковий запис. Якщо ні, то користувачу пропонують створити новий обліковий запис, в якому він вводить свої дані та натискає кнопку "Вхід". Якщо обліковий запис вже є, користувач проходить процедуру авторизації, вводячи свої дані та натискаючи кнопку "Вхід". Якщо користувач авторизований, він потрапляє на головну сторінку. На цій сторінці є можливість перейти на сторінку з виробництвами, де відображаються всі наявні виробництва, або вийти з системи. На сторінці з виробництвами користувач може переглянути усі виробничі зони або перейти до своїх звітів. Кожна виробнича зона відображає всі звіти, що були створені для цієї зони. Користувач також має можливість видалити будь-який звіт. Якщо користувач натискає кнопку для перегляду своїх звітів, він потрапляє на сторінку, де відображаються усі його звіти. Тут він може також видалити звіт або повернутися назад до головної сторінки. Таким чином, діаграма показує послідовність дій користувача від моменту входу в систему до перегляду та видалення звітів, а також можливість повернутися на головну сторінку або вийти з системи на будь-якому етапі.
Діаграма станів для користувача зареестрованого як "Власник"
Спочатку система перевіряє авторизацію користувача. Якщо користувач не авторизований, перевіряється наявність у нього облікового запису. Якщо облікового запису немає, користувач створює новий обліковий запис, вводячи свої дані і натискаючи кнопку "Вхід". Якщо обліковий запис вже існує, користувач проходить процедуру авторизації, вводячи свої дані і натискаючи кнопку "Вхід". У випадку успішної авторизації, користувач потрапляє на головну сторінку. На головній сторінці користувач має можливість редагувати виробництва, переглядати усі звіти по виробничим зонам або вийти з системи. Якщо користувач обирає перегляд звітів, йому надається список усіх звітів по вибраним зонам, де він може переглядати або видаляти їх. Після перегляду звітів користувач може повернутися на головну сторінку. На сторінці з виробництвами відображаються всі наявні виробництва. Користувач може вибрати певне виробництво і перейти до перегляду зон цього виробництва, де йому також надається можливість додати працівників. Додавши працівників, користувач може переглядати список працівників, а також редагувати інформацію про зони виробництва.

6 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Спираючись Клієнтська частина проекту використовує React TS як основний фронтенд фреймворк. React TS забезпечує необхідні інструменти та можливості для створення сучасних клієнтських додатків. Взаємодія з сервером здійснюється через HTTP-методи, які направляються до REST API, використовуючи маршрути до відповідних методів.
побудований на основі концепції компонентів, що дозволяє створювати веб-інтерфейс з невеликих, повторно використовуваних елементів. Це значно полегшує розробку та підтримку великих проектів. Окрім цього, React використовує віртуальний DOM для ефективного оновлення відображення при зміні даних. Це підвищує продуктивність та швидкодію додатка. Віртуальний DOM є ключовою особливістю React, яка робить його ідеальним вибором для створення SPA (Single Page Application). У SPA весь контент завантажується одноразово під час першого запуску додатка, а подальша навігація здійснюється без повторного завантаження сторінок.
React має найбільшу та найрозвиненішу екосистему серед усіх наявних фронтенд фреймворків. Поєднання компонентного підходу, віртуального DOM та великої екосистеми робить React дуже ефективним рішенням для створення клієнтських веб-додатків. 

ВИСНОВКИ

Під час виконання лабораторної роботи була розробка клієнтської частини для програмної системи моніторингу надзвичайних ситуацій на виробництві. 
